<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="MAIN" Id="{60bc0b30-1cdb-42b0-8bc7-ac64af597b82}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR_INPUT
	Axis_R			: FBCylTronicCylinder;
	Axis_S			: FBCyltronicCylinder;
	Axis_T			: FBCyltronicCylinder;
END_VAR

VAR
	Test: BOOL;
	TestState	: INT	:= 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Axis_R(stAxisName:='Achse 1');
Axis_S(stAxisName:='Achse 2');
Axis_T(stAxisName:='Achse 3');
Touchpanel();
Allgemein();

//AC_WriteConfig();

]]></ST>
    </Implementation>
    <Action Name="AC_WriteConfig" Id="{2b447170-4d2f-4568-8b79-9c47d2e36ec8}">
      <Implementation>
        <ST><![CDATA[CASE TestState OF
	0:
		IF Test THEN
			Test := FALSE;
			TestState := TestState + 1;
		END_IF
	1:
		AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl1, Buffer := ADR(MaxSpeed		), BufferSize := SIZEOF(MaxSpeed		), Index := MaxSpeed_ADR		, bExecute := TRUE);
		TestState := TestState + 1;
	
	2:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl1, Buffer := ADR(MaxForce		), BufferSize := SIZEOF(MaxForce		), Index := MaxForce_ADR		, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	3:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl1, Buffer := ADR(MaxACC		), BufferSize := SIZEOF(MaxACC			), Index := MaxACC_ADR			, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	4:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl1, Buffer := ADR(MaxDEC		), BufferSize := SIZEOF(MaxDEC			), Index := MaxDEC_ADR			, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	5:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl1, Buffer := ADR(MaxTrackingErr), BufferSize := SIZEOF(MaxTrackingErr	), Index := MaxTrackingErr_ADR	, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	6:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl2, Buffer := ADR(MaxSpeed		), BufferSize := SIZEOF(MaxSpeed		), Index := MaxSpeed_ADR		, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	7:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl2, Buffer := ADR(MaxForce		), BufferSize := SIZEOF(MaxForce		), Index := MaxForce_ADR		, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	8:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl2, Buffer := ADR(MaxACC		), BufferSize := SIZEOF(MaxACC			), Index := MaxACC_ADR			, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	9:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl2, Buffer := ADR(MaxDEC		), BufferSize := SIZEOF(MaxDEC			), Index := MaxDEC_ADR			, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	10:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl2, Buffer := ADR(MaxTrackingErr), BufferSize := SIZEOF(MaxTrackingErr	), Index := MaxTrackingErr_ADR	, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	11:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl3, Buffer := ADR(MaxSpeed		), BufferSize := SIZEOF(MaxSpeed		), Index := MaxSpeed_ADR		, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	12:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl3, Buffer := ADR(MaxForce		), BufferSize := SIZEOF(MaxForce		), Index := MaxForce_ADR		, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	13:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl3, Buffer := ADR(MaxACC		), BufferSize := SIZEOF(MaxACC			), Index := MaxACC_ADR			, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	14:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl3, Buffer := ADR(MaxDEC		), BufferSize := SIZEOF(MaxDEC			), Index := MaxDEC_ADR			, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	15:
		IF AC_WriteIOL(IO_Link_AMS := IO_Link_AMS, ADDR := ADDRCyl3, Buffer := ADR(MaxTrackingErr), BufferSize := SIZEOF(MaxTrackingErr	), Index := MaxTrackingErr_ADR	, bExecute := TRUE) THEN
			TestState := TestState + 1;
		END_IF
	16:	
		TestState := 0;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Method Name="AC_WriteIOL" Id="{c734cd2c-844f-4cd9-8083-7e72d93ab94e}">
      <Declaration><![CDATA[METHOD AC_WriteIOL : BOOL
VAR_INPUT
	IO_Link_AMS 	: T_AmsNetId;
	ADDR 			: E_IolPort;
	Index			: BYTE;
	Buffer			: PVOID;
	BufferSize		: UDINT;
	bExecute		: BOOL 			:= FALSE;
END_VAR
VAR
	nSubindex		: BYTE 			:= 0;
	WriteIOL 		: FB_IolWrite;
	WriteIOLState	: INT			:= 0;
END_VAR
VAR_OUTPUT
	bError			: BOOL			:= FALSE;
	ErrorID			: UDINT			:= 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE WriteIOLState OF
	0:	//Ready for Read
		WriteIOL(bExecute := FALSE);
		IF NOT WriteIOL.bBusy AND bExecute THEN
			WriteIOL(sNetId := IO_Link_AMS);
			WriteIOL(nIolPort := ADDR);
			WriteIOL(nIndex := Index);
			WriteIOL(nSubindex := nSubindex);
			WriteIOL(cbBufLen := BufferSize);
			WriteIOL(pSRCBuf := Buffer);
			WriteIOL(bExecute := TRUE);
			AC_WriteIOL := FALSE;
			bExecute := FALSE;
			bError := FALSE;
			ErrorID := 0;
			WriteIOLState := 1;
		END_IF
	1:	//Reading
		IF WriteIOL.bError THEN
			WriteIOLState := 99;
		ELSIF WriteIOL.bBusy THEN
			WriteIOLState := 2;
		END_IF;
	2:	//Waiting for reading done
		IF WriteIOL.bError THEN
			WriteIOLState := 99;
		ELSIF WriteIOL.bDone THEN
			AC_WriteIOL := TRUE;
			WriteIOLState := 0;
		END_IF;
	99:	
		WriteIOL(bError=>bError);
		WriteIOL(nIolError=>ErrorID);
		WriteIOLState := 0;
	ELSE;
END_CASE

WriteIOL();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="MAIN">
      <LineId Id="146" Count="4" />
      <LineId Id="154" Count="2" />
      <LineId Id="151" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.AC_WriteConfig">
      <LineId Id="25" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="49" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="72" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="76" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="79" Count="1" />
      <LineId Id="78" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="91" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.AC_WriteIOL">
      <LineId Id="137" Count="36" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>