<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_FigureGenerator" Id="{8808e3f7-7f1f-4aaa-8e06-f743502ab299}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FigureGenerator
VAR_INPUT
	bGenerate		: BOOL; //generate Figure
	nCornerCount	: INT := 5; //how many corners to generate
	rRadius			: REAL := 50;  //Radius from center to a corner
	rFigureTime		: REAL := 5; //Time for the whole figure [S]
END_VAR
VAR_OUTPUT
	pFigure : POINTER TO Figure;
END_VAR
VAR 
	PI		: REAL := 4 * ATAN(1);
	angle : REAL;
	x_corner : REAL;
	y_corner  : REAL;
	angle_next : REAL;
	x_corner_next  : REAL;
	y_corner_next  : REAL;
	edge_length : REAL;
	Step : REAL := 0;
	counter : INT := 0;
	counter1 : INT := 0;
	counter2 : INT := 0;
	Figure : Figure;
	rEdgeTime : REAL;
	points_on_edge : INT;
	adjusted_a : REAL;
	pVisu : POINTER TO ARRAY[0..100] OF VisuElems.VisuStructPoint;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[ //Parameters
(*a = 5  // Distance between points
n = 10 // Number of corners
r = 80  // Radius from center to a corner*)
pFigure := ADR(Figure);
rEdgeTime := rFigureTime / nCornerCount;
counter2 := 0;
IF bGenerate THEN
	FOR counter := 0 TO nCornerCount BY 1 DO
		// Calculate corner coordinates
		angle := 2 * PI * counter / nCornerCount;
		x_corner := rRadius * COS(angle);
		y_corner := rRadius * SIN(angle);
	
		// Calculate next corner coordinates
		angle_next := 2 * PI * (counter + 1) / nCornerCount;
		x_corner_next := rRadius * cos(angle_next);
		y_corner_next := rRadius * sin(angle_next);
	
		// Calculate the distance between corners (edge length)
		edge_length := SQRT(EXPT(x_corner_next - x_corner,2) + EXPT(y_corner_next - y_corner,2));
	
		// Adjust a for this edge to fit perfectly
		points_on_edge := REAL_TO_INT(edge_length / rEdgeTime);
		adjusted_a := edge_length / points_on_edge;   
	
		// Generate points on this edge
		FOR counter1 := 0 TO points_on_edge DO
			Figure.X[counter2] := x_corner + counter1 * adjusted_a * (x_corner_next - x_corner) / edge_length;
			Figure.Y[counter2] := y_corner + counter1 * adjusted_a * (y_corner_next - y_corner) / edge_length;
			Figure.Visu[counter2].iX := REAL_TO_INT(Figure.X[counter2])+ 392;
			Figure.Visu[counter2].iY := REAL_TO_INT(Figure.Y[counter2])+ 318;
			counter2 := counter2 +1;
		END_FOR
 	END_FOR
 	Figure.length := counter2;
	pVisu := ADR(Figure.Visu);
	bGenerate := FALSE;
END_IF	]]></ST>
    </Implementation>
    <LineIds Name="FB_FigureGenerator">
      <LineId Id="13" Count="3" />
      <LineId Id="92" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="21" Count="19" />
      <LineId Id="87" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="91" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>